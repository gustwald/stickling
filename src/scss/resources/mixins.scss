@mixin primary-btn {
  background-color: $c-primary;
  font-family: $Mont;
  color: #ffffff;
  border: none;
  padding: 10px 20px 10px 20px;
  font-size: 14px;
  font-weight: 400;
  outline: none;
}

@mixin standard-btn {
  font-family: $Mont;
  font-style: italic;
  text-transform: lowercase;
  background-color: $c-primary;
  margin: 0 20px;
}

@mixin standard-form {
  form {
    display: flex;
    flex-direction: column;

    .customCheckboxWrapper {
      display: inline-flex;
      flex-direction: row;
      margin-bottom: 10px;
      margin-top: 10px;

      h3 {
        font-family: $Raleway;
        margin-left: 5px;
      }

      input[type='checkbox'] {
        display: none;
      }

      input[type='checkbox']:checked ~ .customCheckbox {
        span {
          display: block;
        }
      }

      .customCheckbox {
        width: 20px;
        height: 20px;
        border: 2px solid $c-primary;
        display: flex;
        justify-content: center;
        align-items: center;

        span {
          width: 6px;
          height: 6px;
          background-color: $c-primary;
          display: none;
          border-radius: 100px;
        }
      }
    }

    label {
      input[type='text'],
      [type='number'],
      [type='email'],
      [type='password'] {
        background-color: transparent;
        border: none;
        outline: none;
        border-bottom: 1px solid $c-black;
        width: 100%;
        margin-top: 10px;
        margin-bottom: 10px;
        padding: 20px 0 20px 0;
        font-size: 14px;
        font-family: $open-sans;
        color: $c-black;
        box-shadow: inset 0 0 0 0 transparent;
        transition: all 0.4s ease;

        &:focus {
          border-bottom: 1px solid transparent;
          box-shadow: inset 0 -2px 0 0 $c-primary;
          transition: all 0.7s ease;
        }

        &::placeholder {
          font-size: 14px;
          font-family: $open-sans;
          font-style: italic;
          opacity: 0.5;
        }
      }
    }
  }
}

@mixin b($width) {
  @media (min-width: $width) {
    @content;
  }
}

@mixin bm($min, $max) {
  @media (min-width: $min) and (max-width: $max) {
    @content;
  }
}

@mixin size($size) {
  height: $size;
  width: $size;
}

@mixin trans($props...) {
  $unfoldedTransitions: ();

  @each $prop in $props {
    $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($prop), comma);
  }

  transition: $unfoldedTransitions;
}

@function unfoldTransition ($prop) {
  $duration: 0.25s;
  $easing: $animation-transition;
  $defaultProperties: (
    $prop,
    $duration,
    $easing
  );

  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($prop) {
      $p: nth($prop, $i);
    } @else {
      $p: nth($defaultProperties, $i);
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}
